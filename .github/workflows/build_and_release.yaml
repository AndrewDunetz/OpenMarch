name: Build/release

on:
    push:
        branches: [main, updater]

jobs:
    release:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os:
                    # - macos-latest
                    # - ubuntu-latest
                    - windows-latest # Skip windows for now to figure out canvas dependencies

        steps:
            - name: Check out Git repository
              uses: actions/checkout@v1

            - name: Install canvas dependencies (Windows)
              if: startsWith(matrix.os, 'windows')
              run: |
                  # Setup Node.js and Python
                  choco install nodejs-lts python3 -y

                  # Install Visual Studio Build Tools
                  npm install --global --production windows-build-tools

                  # Install GTK bundle and other dependencies
                  choco install -y gtk-runtime
                  choco install -y microsoft-build-tools
                  choco install -y libjpeg-turbo

                  # Properly refresh environment variables in PowerShell
                  Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
                  Update-SessionEnvironment

                  # Verify PATH includes required directories
                  $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              shell: PowerShell

            # - name: Install canvas dependencies (macOS)
            #   if: startsWith(matrix.os, 'macos')
            #   run: brew install pkg-config cairo pango libpng jpeg giflib librsvg pixman python-setuptools

            # - name: Install Node.js, NPM
            #   uses: actions/setup-node@v1
            #   with:
            #       node-version: 22

            # - name: Install canvas dependencies (Ubuntu)
            #   if: startsWith(matrix.os, 'ubuntu')
            #   run: sudo apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

            # - name: Prepare for app notarization
            #   if: startsWith(matrix.os, 'macos')
            #   run: |
            #       mkdir -p ~/private_keys/
            #       echo '${{ secrets.apple_api_key }}' > ~/private_keys/apple_api_key.p8

            - name: Build/release Electron app
              uses: samuelmeuli/action-electron-builder@v1.6.0
              with:
                  # GitHub token, automatically provided to the action
                  # (No need to define this secret in the repo settings)
                  github_token: ${{ secrets.github_token }}

                  # If the commit is tagged with a version (e.g. "v1.0.0"),
                  # release the app after building
                  release: ${{ startsWith(github.ref, 'refs/tags/v') }}
                  # mac_certs: ${{ secrets.mac_certs }}
                  # mac_certs_password: ${{ secrets.mac_certs_password }}
            #   env:
            #       APPLE_API_KEY: "~/private_keys/apple_api_key.p8"
            #       APPLE_API_KEY_ID: ${{ secrets.apple_api_key_id }}
            #       APPLE_API_ISSUER: ${{ secrets.apple_api_key_issuer }}
